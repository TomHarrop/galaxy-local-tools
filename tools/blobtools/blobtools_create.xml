<tool id="blobtools" name="Blobtools create" version="1.1" >
    <description>Visualize, QC and taxonomic partitioning of genome datasets</description>
    <xrefs>
        <xref type='bio.tools'>blobtools</xref>
    </xrefs>	
    <macros>
	  <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <expand macro="stdio" />
    <expand macro="version_command" /> 
    <command><![CDATA[
	    cp $input_bam input.bam &&
	    samtools index input.bam &&
	    #if $ref_db_source.db_source == "history":
	        ln -s $ref_db_source.reference_database ./nodesDB.txt
	    #else
	        ln -s ${ref_db_source.index.fields.db_path} ./nodesDB.txt
	    #end if
	    &&
	    blobtools create --db ./nodesDB.txt -i $input_fna -b input.bam -t $input_blast -o output
	    && mv output.input.bam.cov '$Cov'
	    && mv output.blobDB.json '$blobDB_json'
	    ### 2>&1

	    ]]></command>
    <inputs>
	    <param name="input_fna" type="data" format="fasta" label="FASTA File" help="Input FASTA file"/>
	    <param name="input_bam" type="data" format="bam" label="BAM File" help="Input BAM file"/>
	    <param name="input_blast" type="data" format="tabular" label="Input Blast File" help="Input Blast Tabular file"/>
	    <conditional name="ref_db_source">
                <param name="db_source" type="select" label="Will you select a reference database from your history or use a built-in index?" help="Built-ins were indexed using default options">
                   <option value="indexed">Use a built-in index</option>
                   <option value="history">Use one from the history</option>
                </param>
            <when value="indexed">
                <param name="index" type="select" label="Select a reference database" help="If your database of interest is not listed, contact your Galaxy admin">
                    <options from_data_table="ncbitax_database">
                        <filter type="sort_by" column="2"/>
                        <validator type="no_options" message="No indexes are available for the selected input dataset"/>
                    </options>
                </param>
            </when>
            <when value="history">
                <param name="reference_database" argument="--db" type="data" format="txt" label="Select the reference database" />
            </when>
        </conditional>
    </inputs>
    <outputs>
	    <data name="Cov" format="txt" label="${tool.name} on ${on_string}" from_work_dir="output.input.bam.cov" />
	    <data name="blobDB_json" format="json" label="${tool.name} on ${on_string}" from_work_dir="output.blobDB.json" />
    </outputs>

    <tests>
	 <test>
            <!-- #1 test with common parameters -->
	   <param name="pacbio_input_file" value="pacbio.fastq"/>
	   <section name="ipa_params">
		  <param name="no_polish" argument="--no-polish" type="boolean" truevalue="--no-polish" falsevalue="" checked="False"/>
                  <param name="no_phase" argument="--no-phase" type="boolean" truevalue="--no-phase" falsevalue="" checked="False"/>
		  <param name="no_purge_dups" argument="--no-purge-dups" type="boolean" truevalue="--no-purge-dups" falsevalue="" checked="False"/>
                  <param name="genome_size" argument="--genome-size" type="integer" value="0"/>
                  <param name="coverage" argument="--coverage" type="integer" value="0"/>
	   </section>
        </test>
    </tests>
    <help><![CDATA[

.. class:: infomark

**What it does**
 
*To visualize, quality control and taxonomic partitioning of genome datasets. Blobtools create is used to generate a blobDB.json to serve as a input for blobtools view / blobtools plot.*

**Input**
	    
- a fasta file - assembly file in FASTA format
- a bam file - an alignment file
- a blast output file - Hits file in format (qseqid\ttaxid\tbitscore). e.g. BLAST output "--outfmt '6 qseqid staxids bitscore'"

**Parameters**

- min_score - Minimal score necessary to be considered for taxonomy calculation, otherwise set to 'no-hit' [default: 0.0]
- min_diff - Minimal score difference between highest scoring
- tax_collision_random - Random allocation of taxonomy if highest scoring taxonomies have equal scores (otherwise "unresolved") [default: False]
- cov - COV file(s)) coverage file
- calculate_cov - Legacy coverage when getting coverage from BAM file
- title - Title of BlobDB [default: output prefix]

**Command line example:**

- blobtools create -i assembly.fna -b mapping_sorted.bam -t blast.out -o prefix

**Output**

- prefix.mapping_sorted.bam.cov - converage file
- prefix.blobDB.json - blobDB in json file format

.. class:: infomark

**Contributor**

Galaxy Australia wrapped the Blobtools: the original software is available in this `Github repository <https://github.com/DRL/blobtools>`_.

**References**

    ]]></help>
     <citations>
        <citation type="doi">DOI: 10.12688/f1000research.12232.1</citation>
    </citations>
</tool>
