<tool id="hifiadapterfilt" name="HiFi Adapter Filter" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@" >
    <description>HiFi reads adapter filter</description>
    <macros>
	  <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <expand macro="stdio" />
    <command><![CDATA[

	    @CLEAN_EXT@

	    #if $input_file.is_of_type("fastq.gz"):
	    	#set $inputfile = $clean_ext($input_file.element_identifier) + '.fastq.gz'
		#set prefix = $clean_ext($input_file.element_identifier)
	    #elif $input_file.is_of_type("fastq"):
	        #set $inputfile = $clean_ext($input_file.element_identifier) + '.fastq'
	        #set prefix = $clean_ext($input_file.element_identifier)
	    #elif $input_file.is_of_type("bam"):
	    	#set $inputfile = $clean_ext($input_file.element_identifier) + '.bam'
                #set prefix = $clean_ext($input_file.element_identifier)
	    #end if
	    ln -s '${input_file}' '${inputfile}' &&

	    bash pbadapterfilt.sh
            -p '$prefix'
	    -l '$match_length'
	    -m '$match_percentage'            
	    -t\${GALAXY_SLOTS:-4}
	    -o . 
	    && cp '$prefix'.filt.fastq.gz '$cleanfastq'
	    && cp '$prefix'.contaminant.blastout '$blastout'  
	    && cp '$prefix'.stats '$stats'
	    && cp '$prefix'.blocklist '$blocklist'
	    ]]></command>
    <inputs>
	    <param name="input_file" type="data" format="bam,fastq,fastq.gz" label="Input HiFi Reads" help="HiFi reads"/>
            <param argument="-l" name="match_length" type="integer" value="44" label="minimum length of adapter match to remove. Default=44" />
            <param argument="-m" name="match_percentage" type="integer" value="97" label="minimum percent Match of adapter to remove. Default=97" />
    </inputs>
    <outputs>
	    <data name="cleanfastq" format="fastq.gz" label="${tool.name} on ${on_string}: clean reads"/>
	    <data name="blastout" format="tabular" label="${tool.name} on ${on_string}: contaminant blastout"/>
	    <data name="stats" format="txt" label="${tool.name} on ${on_string}: contaminant statistic"/>
            <data name="blocklist" format="txt" label="${tool.name} on ${on_string}: blocklist"/>
    </outputs>
	
    <tests>
	 <test>
            <!-- #1 test with common parameters -->
	    <param name="input_file" value="combine.fq" ftype="fastq"/>
            <param name="l" value="44" />
	    <param name="m" value="97" />
	    <output name="cleanfastq" ftype="combine.filt.fastq.gz" file="fastq.gz" />
            <output name="blastout" ftype="combine.contaminant.blastout" file="tabular" />
            <output name="stats" ftype="combine.stats" file="txt" />
	    <output name="blocklist" ftype="combine.blocklist" file="txt" />
        </test>
    </tests>
    <help><![CDATA[
	    
.. class:: infomark

**What it does**
	    
*Convert .bam to .fastq and remove reads with remnant PacBio adapter sequences*

**Input**
	    
- input file - FASTQ and BAM. Also, gipped versions of FASTQ. 

**Example:**

- bash pbadapterfilt.sh [ -p file Prefix ] [ -l minimum Length of adapter match to remove. Default=44 ] [ -m minimum percent Match of adapter to remove. Default=97 ] [ -t Number of threads for blastn. Default=8 ] [ -o outdirectory prefix Default=. ]

**Output**

- {prefix}.contaminant.blastout (Output of BLAST search)
- {prefix}.blocklist (Headers of PB adapter contaminated reads to be removed)
- {prefix}.filt.fastq.gz (Fastq reads free of PB adapter sequence ready for assembly)
- {prefix}.stats (File with simple math on number of reads removed, etc)

 
.. class:: infomark
	    
**References**
	    
More information are available on `website <https://github.com/sheinasim/HiFiAdapterFilt>`_.
	]]></help>
     <citations>
	 <citation type="doi">DOI: 10.1186/s12864-022-08375-1</citation>
    	 <citation type="bibtex">@misc{GalaxyAustraliaHiFiAdapterFilt,
      		author = {Mike Thang},
		organization = {Galaxy Australia},
		url = {https://github.com/usegalaxy-au/tools-au/},
      		year = {2022},
    	}</citation>
     </citations>
</tool>
