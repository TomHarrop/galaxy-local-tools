<tool id="links" name="Long Interval Nucleotide K-mer Scaffolder" version="@TOOL_VERSION@+galaxy" python_template_version="3.5" profile="20.09">
    <macros>
        <token name="@TOOL_VERSION@">2.0.0</token>
    </macros>
    <xrefs>
        <xref type="bio.tools">links</xref>
    </xrefs>
    <requirements>
        <!-- Bioconda container (job runner needs to be set to singularity) -->
        <!-- 2.0.1 is missing LINKS_CPP -->
        <!-- 2.0.0 is missing perl -->
        <!-- <requirement type="package" version="@TOOL_VERSION@">links</requirement>  -->
        <!-- My container-->
        <container type="docker">ghcr.io/tomharrop/container-links:v@TOOL_VERSION@</container>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        ## SET UP FILE PATHS
        #set sequences_fn = 'sequences.' + $f.ext
        ln -s '$f' '$sequences_fn'
        &&
        #set n = 1
        #for $read in $reads
            #set read_fn = 'reads' + str($n) + '.' + $read.ext
            #set n += 1
            ln -s '$read' '$read_fn'
            &&
            printf '%s\n' '$read_fn' >> reads.fof
            &&
        #end for

        ## RUN LINKS
        LINKS
        -f '$sequences_fn'
        -s reads.fof
        -b links_output
        #if $scaffolding.k:
            -k '$scaffolding.k'
        #end if
        #if $scaffolding.d:
            -d '$scaffolding.d'
        #end if
        #if $scaffolding.t:
            -t '$scaffolding.t'
        #end if
        #if $advanced.a:
            -a '$advanced.a'
        #end if
        #if $advanced.e:
            -e '$advanced.e'
        #end if
        #if $advanced.o:
            -o '$advanced.o'
        #end if
        #if $advanced.l:
            -l '$advanced.l'
        #end if
        #if $advanced.z:
            -z '$advanced.z'
        #end if
        #if $advanced.p:
            -p '$advanced.p'
        #end if
        &&

        ## TIDY UP
        rm reads.fof '$sequences_fn'

    ]]></command>        
    <inputs>
        <param argument="-f" type="data" format="fasta,fasta.gz" help="Sequences to scaffold" label="Contigs" />
        <param type="data" name="reads" multiple="true" format="fasta,fasta.gz,fastq,fastq.gz" label="Reads" help="Long sequence reads for scaffolding" />
        <section name="scaffolding" title="Scaffolding options" expanded="False">
            <param argument="-k" type="integer" optional="true" min="11" max="21" value="15" label="k-mer length" />
            <param argument="-d" type="text" optional="true" value="4000" label="Distance" help="Distance between k-mer pairs. Multiple distances are separated by comma, e.g. 500,1000,2000,3000"/>
            <param argument="-t" type="text" optional="true" value="2" label="Step" help="Step of sliding window when extracting k-mer pairs from long reads. Multiple steps are separated by comma, e.g. 10,5" />
        </section>
        <section name="advanced" title="Advanced options" expanded="False">
            <param argument="-a" type="float" optional="true" value="0.3" label="Maximum link ratio" help="Maximum link ratio between two best contig pairs. Higher values lead to least accurate scaffolding" />
            <param argument="-e" type="float" optional="true" value="0.1" label="Error" help="Error (%) allowed on -d distance"/>
            <param argument="-l" type="integer" optional="true" value="5" label="Number of links" help="Minimum number of links (k-mer pairs) to compute 
            scaffold"/>
            <param argument="-o" type="integer" optional="true" value="0" label="Offset" help="Offset position for extracting k-mer pairs"/>
            <param argument="-p" type="float" optional="true" value="0.001" label="Bloom filter false positive rate" help="Increase to prevent memory allocation errors"/>
            <param argument="-z" type="integer" optional="true" value="500" label="Minimum contig length" help="Minimum contig length to consider for scaffolding"/>
        </section>
    </inputs>
    <outputs>
        <data name="scaffolds" format="fasta" from_work_dir="links_output.scaffolds.fa" />
        <data name="correspondence" format="tsv" from_work_dir="links_output.assembly_correspondence.tsv" />
        <data name="gv" format="graph_dot" from_work_dir="links_output.gv" />
    </outputs>
    <tests>
    <!-- Basic test -->
    <test>
        <param name="f" value="used_contigs.fasta.gz"/>
        <param name="reads" value="reads.fasta.gz"/>
        <output name="scaffolds" ftype="fasta" file="single_readfile.scaffolds.fa"/>
        <output name="correspondence" ftype="tsv" file="single_readfile.assembly_correspondence.tsv"/>
        <output name="gv">
            <assert_contents>
                <has_text text="node [shape = circle]" />
            </assert_contents>
        </output>
    </test>
    <!-- Test multiple readfile input -->
    <test>
        <param name="f" value="used_contigs.fasta.gz"/>
        <param name="reads" value="reads1.fasta.gz,reads2.fasta.gz"/>
        <output name="scaffolds" ftype="fasta" file="multi_readfile.scaffolds.fa"/>
        <output name="correspondence" ftype="tsv" file="multi_readfile.assembly_correspondence.tsv"/>
    </test>
    <!-- Test scaffolding paramaters -->
    <test>
        <param name="f" value="used_contigs.fasta.gz"/>
        <param name="reads" value="reads.fasta.gz"/>
        <param name="k" value="19" />
        <param name="d" value="500,1000,2000,3000" />
        <param name="t" value="10,5" />
        <output name="scaffolds" ftype="fasta" file="scaffolding.scaffolds.fa"/>
        <output name="correspondence" ftype="tsv" file="scaffolding.assembly_correspondence.tsv"/>
    </test>
    <!-- Test advanced parameters -->
    <test>
        <param name="f" value="used_contigs.fasta.gz"/>
        <param name="reads" value="reads.fasta.gz"/>
        <output name="scaffolds" ftype="fasta" file="advanced.scaffolds.fa"/>
        <param name="a" value="0.2" />
        <param name="e" value="0.05" />
        <param name="l" value="10" />
        <param name="o" value="1" />
        <param name="z" value="600" />
        <output name="scaffolds" ftype="fasta" file="advanced.scaffolds.fa"/>
        <output name="correspondence" ftype="tsv" file="advanced.assembly_correspondence.tsv"/>
    </test>
    </tests>
    <help><![CDATA[

Long Interval Nucleotide *k*-mer Scaffolder (LINKS)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. figure:: https://github.com/warrenlr/links/raw/master/links-logo.png
   :alt: links-logo
   :width: 200px

`LINKS <https://github.com/bcgsc/LINKS>`__ is a genomics application for
scaffolding genome assemblies with long reads, such as those produced by
Oxford Nanopore Technologies Ltd. It can be used to scaffold
high-quality draft genome assemblies with any long sequences (eg. ONT
reads, PacBio reads, other draft genomes, etc).

    ]]></help>
    <citations>
      <citation type="doi">10.1186/s13742-015-0076-3</citation>
    </citations>
</tool>