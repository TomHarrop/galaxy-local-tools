<tool id="pbgcpp" name="pbgcpp (GenomicConsensus) arrow." version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description>Compute genomic consensus and call variants using PacBio reads mapped to a reference.</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="xrefs"/>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[

## filenames

#set reference_fn = 'reference.' + $reference.ext
ln -s '$reference' '$reference_fn' &&

#set input_fn = 'input.' + $input.ext
ln -s '$input' '$input_fn' &&

#set bai_fn = $input_fn + '.bai'
ln -s '$bai' '$bai_fn' &&

## set up the outputs
#set output_line = ','.join('output.' + str(x) for x in $output_selector)

## variantCaller

gcpp 
--num-threads \${GALAXY_SLOTS:-4}
--reference '$reference_fn'
--output $output_line
'$input_fn'

    ]]></command>
    <inputs>
        <param argument="--reference" type="data" format="fasta" help="The reference FASTA file" label="Reference genome" />
        <param type="data" name="input" format="bam" label="bam" help="The input BAM alignment file" />
        <param type="data" name="bai" format="bai" label="bai" help="The BAM index file" />
        <!-- Output Options -->
        <param name="output_selector" type="select" multiple="True" display="checkboxes" label="Output formats">
            <!-- Use the format's extension as the value, so we can use it directly in the output_line constructor. -->
            <option value="fa" selected="true">Computed consensus (fasta)</option>
            <option value="vcf">Variants (vcf)</option>
            <option value="gff">I'm not sure what this is but it's GFF (gff)</option>
        </param>
    </inputs>
    <outputs>
        <data name="fa" format="fasta" from_work_dir="output.fa" label="${tool.name} on ${on_string} (consensus)">
            <filter>output_selector and 'fa' in output_selector</filter>
        </data>
        <data name="gff" format="gff" from_work_dir="output.gff" label="${tool.name} on ${on_string} (gff)">
            <filter>output_selector and 'gff' in output_selector</filter>
        </data>
        <data name="vcf" format="vcf" from_work_dir="output.vcf" label="${tool.name} on ${on_string} (vcf)">
            <filter>output_selector and 'vcf' in output_selector</filter>
        </data>
    </outputs>
    <tests>
        <!-- test1: basic test (output from pbmm2) -->
        <test expect_num_outputs="1">
            <param name="reference" value="bnd-ref.fasta"/>
            <param name="input" value="pbmm2_test1_out.bam"/>
            <param name="bai" value="pbmm2_test1_out.bam.bai"/>
            <param name="output_selector" value="fa"/>
            <output name="fa" ftype="fasta" file="pbgcpp_test1_out.fa"/>
        </test>
        <!-- test2: can we include the function from GenomicConsensus by mapping the reads with pbgcpp? -->
        <test expect_num_outputs="1">
            <param name="reference" value="All4mer.V2.01_Insert.fa"/>
            <param name="input" value="pbmm2_test2_out.bam"/>
            <param name="bai" value="pbmm2_test2_out.bam.bai"/>
            <param name="output_selector" value="fa"/>
            <output name="fa" ftype="fasta" file="pbgcpp_test2_out.fa"/>
        </test>
        <!-- test3: output selector -->
        <test  expect_num_outputs="3">
            <param name="reference" value="bnd-ref.fasta"/>
            <param name="input" value="pbmm2.bam"/>
            <param name="bai" value="pbmm2.bam.bai"/>
            <param name="output_selector" value="fa,gff,vcf"/>
            <output name="fa" ftype="fasta" file="pbgcpp_test3_out.fa"/>
            <output name="gff" ftype="gff">
                <assert_contents>
                    <has_text text="gff-version 3" />
                </assert_contents>
            </output>
            <output name="vcf" ftype="vcf">
                <assert_contents>
                    <has_text text="fileformat=VCFv4.2" />
                </assert_contents>
            </output>
        </test>
    </tests>
        <help><![CDATA[
**What it does**

Compute genomic consensus and call variants relative to the reference.
        ]]></help>
</tool>
