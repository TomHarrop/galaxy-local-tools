<tool id="xnatutils" name="Xnatutils" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description>Australia Images Service</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
#set $xnat_url = $__user__.extra_preferences.get('xnat_account|xnat_url', "").strip()
#set $xnat_user = $__user__.extra_preferences.get('xnat_account|xnat_user', "").strip()
#set $xnat_pass = $__user__.extra_preferences.get('xnat_account|password', "").strip()

export XNAT_URL=$xnat_url &&
export XNAT_USER=$xnat_user &&
export XNAT_PASS=$xnat_pass &&

      #if $operation.ops_list == "list":
	#if $operation.project_option.project == "default":
	    xnat-ls --server $xnat_url >> '$list_log' 2>&1
	#else
	    #if $operation.project_option.project_id !='':
	    	xnat-ls --server $xnat_url
	    		--project $operation.project_option.project_id
	    		#if $operation.project_option.subject_id !='':
			   --subject $operation.project_option.subject_id
	    		#end if
	    		--datatype $operation.project_option.datatype_choice
	    		#if $operation.project_option.return_attr:
			    #if $operation.project_option.datatype_choice == 'scan':
	    		        --return_attr type
	    		    #elif $operation.project_option.datatype_choice == 'subject' or $operation.project_option.datatype_choice == 'session':
	    		        --return_attr id
			    #end if
	    		#end if
			#if $operation.project_option.datatype_choice == 'session' and $operation.project_option.datatype_selector.include_scan !='':
	    		    --with_scans $operation.project_option.datatype_selector.include_scan
	    		#end if
	    		#if $operation.project_option.datatype_choice == 'session' and $operation.project_option.datatype_selector.exclude_scan !='':
			    --without_scans $operation.project_option.datatype_selector.exclude_scan
	    		#end if
	    		#if  $operation.project_option.before_date !='':
			    --before  $operation.project_option.before_date
			#end if
	    		#if  $operation.project_option.after_date !='':
			    --after $operation.project_option.after_date
	    		#end if
			>> '$list_log' 2>&1
	    #else
	    	echo "Project ID is missing" >> '$list_log' 2>&1
	    #end if
	#end if
      #elif $operation.ops_list == "get":
	    #if $operation.input_option.input_type == 'use_xml':
	    	xnat-get --server $xnat_url $operation.input_option.xml_file  >> '$get_log'  2>&1
	    #else 
	    	  mkdir outdir &&
		  
	    	  xnat-get --server $xnat_url $operation.input_option.session
			   #if $operation.input_option.scans !='':
	    		   	--scan 
	    		   	#for $sid in str($operation.input_option.scans).split(',')
                        		'$sid'
	    		   	#end for
	    		   #end if
	    		   #if $operation.input_option.scan_option.with_scans !='':
	    			--with_scans 
	    			#for $wsid in str($operation.input_option.scan_option.with_scans).split(',')
					'$wsid'
				#end for
	    		   #end if
	    		   #if $operation.input_option.scan_option.without_scans !='':
	    			--without_scans 
	    			#for $wosid in str($operation.input_option.scan_option.without_scans).split(',')
					'$wosid'
	    			#end for
	    		   #end if
			   #if $operation.input_option.opt.project_id !='':
	    			-p $operation.input_option.opt.project_id
	    		   #end if
	    		   #if $operation.input_option.opt.subject_id !='':
				-p $operation.input_option.opt.project_id
	    			-j $operation.input_option.opt.subject_id
			   #end if
	    		   #if $operation.input_option.scan_option.with_scans =='':
				$operation.input_option.opt.dont_match_scan_id
	    		   #end if
	    		   #if str($operation.input_option.convert_type.to_type) == 'nifti':
	    			--convert_to '$operation.input_option.convert_type.to_type' 
	    		   #else if str($operation.input_option.convert_type.to_type) == 'nifti_gz':
				--convert_to '$operation.input_option.convert_type.to_type' 
	    		
			   #end if

	    		   --target output &&
			   mv output/*/* outdir/  >> '$get_log'  2>&1
	   
	    #end if
      #elif $operation.ops_list == "put":
	    #import re
	    #if $operation.upload_file.ext.endswith(".gz")
	    	#set file_identifier=re.sub('[^\s\w\-]', '_', str($operation.upload_file.element_identifier)) + '.gz'
		ln -s '$operation.upload_file' '${file_identifier}' &&
	    #else
	        #set file_identifier=re.sub('[^\s\w\-]', '_', str($operation.upload_file.element_identifier))
		ln -s '$operation.upload_file' '${file_identifier}' &&
	    #end if

	    xnat-put --server $xnat_url
	    	     $operation.session_name
	    	     $operation.scan_name
		     '${file_identifier}'
	    	     --method $operation.method
	    	     $operation.dataset_option.overwrite
		     $operation.dataset_option.create_session
	    	     #if $operation.dataset_option.resource_name !='':
	    		 --resource_name $operation.dataset_option.resource_name
	    	     #end if
		     #if $operation.id_option.project_id !='':
	    		 --project_id
	             #end if
	    	     #if $operation.id_option.subject_id !='':
	    		 --subject_id
	             #end if
	    	     #if $operation.id_option.scan_id != '':
	    		 --scan_id
	             #end if
                     >> '$put_log' 2>&1
      #elif $operation.ops_list == "rename":
	    xnat-rename --server $xnat_url 
	                $operation.old_session_name $operation.new_session_name >> '$rename_log' 2>&1
      #end if

]]></command>
    <inputs>
	<conditional name="operation">
	   <param name="ops_list" type="select" label="Xnat operation">
		<option value="list">list</option>
		<option value="get">get</option>
		<option value="put">put</option>
		<option value="rename">rename</option>
	   </param>
	   <when value="list">
		<conditional name="project_option">
		     <param name="project" type="select" label="list ID" help="list project id only if it's not defined by user">
		       <option value="default" selected="true">list project id only</option>
		       <option value="user_defined">user defined</option>
		     </param>
		     <when value="default"></when>
		     <when value="user_defined">
			   <param name="project_id" type="text" optional="false" label="Enter project ID" help="Object subject, session or scan for the project id entered by user"/> 
			   <param name="subject_id" type="text" label="Enter subject ID" help="The ID of the subject to list the sessions from. Requires that project_id is also supplied"/>
			   <param name="before_date" type="text" label="Only select sessions before this date" help="ISO8601 format date or date/time, like YYYY-MM-DD" />
			   <param name="after_date" type="text" label="Only select sessions after this date" help="ISO8601 format date or date/time, like YYYY-MM-DD" />
			   <param argument="--return_attr" type="boolean" truevalue="true" falsevalue="" checked="false" label="Get attribute" help="return id for project and type for scan"/>
			   <conditional name="datatype_selector">
				<expand macro="datatype"/>
				<when value="subject">

				</when>
				<when value="session">
				      <param name="include_scan" type="text" label="Enter scan identifier(s)" help="Include these scan ids to be listed"/>
				      <param name="exclude_scan" type="text" label="Enter scan identifier(s)" help="Exclude these scan ids to be listed"/>
			        </when>
				<when value="scan">
				</when>
			   </conditional>
		     </when>
		</conditional>
	   </when>
	   <when value="get">
		<conditional name="input_option">
		    <param name="input_type" type="select" label="Selet an input type" >
		       <option value="user_defined" selected="True">user defined</option>
                       <option value="use_xml" >xml file</option>
	            </param>
		    <when value="use_xml">
			 <param name="xml_file" type="data" format="xml" label="xml file"/>
			 <expand macro="xnat_get_option"/>
		    </when>
		    <when value="user_defined">
		        <param name="session" type="text" label="Name of session" help="Use session name (i,e MRH017_001_MR01) or regular expression (i.e MRH017_001_MR01) to download; Note: Must provide project id to Enter project identifier if session is not provided"/>   
			<param name="scans" type="text" multiple="true" label="Name of the scan" help="If not provided all scans from the session are downloaded. Multiple scans can be specified with comma (i.e example_s1, example_s2)"/>
			<expand macro="xnat_get_option"/>
	  	   </when>
	       </conditional>
	   </when>   
	    <when value="put">
		   <param name="upload_file" type="data" format="nii1,nii1.gz" optional="false" label="Select files to upload" help="upload filename format i.e e4.60005.nii.gz - will be converted to filename format project_subject_visit (i.e e4_60005_nii_gz)  have exactly two underscores" />
		   <param name="session_name" type="text" optional="false" label="Enter a session name" help="required to enable create-session; project_subject_visit convention, i.e. have exactly 2 underscores"/>
		   <param name="scan_name" type="text" optional="false" label="Enter a scan name" help="Name for the dataset on XNAT; --overwrite must be provided if the scan already exists"/>
		   <expand macro="xnat_put_option"/>
		   <param name="method" type="select" multiple="false" label="Select output file type">
			  <option value="tgz_file" selected="true">tgz file</option> 
			  <option value="per_file">per file</option>
			  <option value="tar_memory">tar memory</option>
			  <option value="tgz_memory">tgz memory</option>
			  <option value="tar_file">tar file</option>
                  </param>
	    </when>
	    <when value="rename">
		 <param name="old_session_name" type="text" optional="false" label="Name of the session to rename" help="i.e subject01_MR01" />
		 <param name="new_session_name" type="text" optional="false" label="The new name of the session" help="rename to subject01_MT01"/>
	    </when>
	</conditional>
    </inputs>
    <outputs>
	   <data name="list_log" format="txt" label="${tool.name} list">
		 <filter>operation['ops_list'] == 'list'</filter>
	   </data>
	   <data name="get_log" format="txt" label="${tool.name} get">
                 <filter>operation['ops_list'] == 'get'</filter>
	   </data>
	   <collection name="dicom_output" type="list:list" label="${tool.name} on ${on_string}: Xnatutil get dicom">
	       <filter>operation['ops_list'] == 'get' and operation['input_option']['convert_type']['to_type'] == "dicom" </filter>	   
               <discover_datasets pattern="(?P&lt;identifier_0&gt;.*?)/(?P&lt;identifier_1&gt;.*?)(?P&lt;ext&gt;dcm?)" directory="outdir" ext="auto" format="binary" recurse="true" match_relative_path="true" />
           </collection>
	   <collection name="nifti_gz_output" type="list" label="${tool.name} on ${on_string}: Xnatutil get nifti gz">
	       <filter>operation['ops_list'] == 'get' and operation['input_option']['convert_type']['to_type'] == "nifti_gz" </filter>	   
               <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;nii.gz)" directory="outdir" format="nii.gz" />
               <discover_datasets pattern="(?P&lt;identifier_0&gt;.*?)(?P&lt;ext&gt;json?)" directory="outdir" format="json" />
       	   </collection>
           <collection name="nifti_output" type="list" label="${tool.name} on ${on_string}: Xnatutil get nifti">
               <filter>operation['ops_list'] == 'get' and operation['input_option']['convert_type']['to_type'] == "nifti" </filter>
               <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;nii)" directory="outdir" format="nii" />
               <discover_datasets pattern="(?P&lt;identifier_0&gt;.*?)(?P&lt;ext&gt;json?)" directory="outdir" format="json" />
           </collection>
           <data name="put_log" format="txt" label="${tool.name} on ${on_string}: put">
                 <filter>operation['ops_list'] == 'put'</filter>
           </data>
           <data name="rename_log" format="txt" label="${tool.name} rename">
                 <filter>operation['ops_list'] == 'rename'</filter>
           </data>
    </outputs>
    <tests>
         <!-- Test 1 xnat-ls with project option -->
	<test expect_num_outputs="1">
            <conditional name="operation">
                <param name="ops_list" value="list" />
            </conditional>
            <output name="list_log" ftype="xnt_ls_project.log">
                <assert_contents>
		    <has_text text="subject01"/>
                </assert_contents>
            </output>
    	</test>
         <!-- Test 2 xnat-ls with project option datatype scan  -->
        <test expect_num_outputs="1">
            <conditional name="operation">
		 <param name="ops_list" value="list" />
		 <conditional name="datatype_selector">
		     <param name="datatype_choice" value="scan"/>
		 </conditional>
            </conditional>
            <output name="list_log" ftype="xnat_ls_project_scan.log">
                <assert_contents>
                    <has_text text="t1w"/>
                </assert_contents>
            </output>
        </test>
         <!-- Test 3 xnat-ls with project option datatype session -->
        <test expect_num_outputs="1">
            <conditional name="operation">
		<param name="ops_list" value="list" />
		<conditional name="datatype_selector">
		     <param name="datatype_choice" value="session"/>
		</conditional>
            </conditional>
            <output name="list_log" ftype="xnt_ls_project_session.log">
                <assert_contents>
                    <has_text text="subject01_MR01"/>
                </assert_contents>
            </output>
    	</test>
         <!-- Test 4 xnat-get with project option datatype session -->
        <test expect_num_outputs="1">
            <conditional name="operation">
                <param name="ops_list" value="get" />
                <param name="datatype_choice" value="t1w"/>
            </conditional>
            <output name="get_log" ftype="xnt_get.log">
                <assert_contents>
                    <has_text text="subject01_MR01"/>
                </assert_contents>
            </output>
    	</test>
	<!-- Test 5 xnat-put xnat-put subject01_MT01 t1w test-data/e4.60005.nii.gz method per_file overwrite -->
        <test expect_num_outputs="1">
            <conditional name="operation">
                <param name="ops_list" value="put" />
		<param name="upload_file" value="e4.60005.nii.gz"/>
		<param name="session_name" value="subject01_MR01"/>
		<param name="scan_name" value="t1w"/>
		<param name="method" value="per_file"/>
		<param name="overwrite" value="true"/>
            </conditional>
            <output name="put_log" ftype="xnt_get.log">
                <assert_contents>
                    <has_text text="subject01_MR01"/>
                </assert_contents>
            </output>
        </test>
         <!-- Test 6 xnat-rename to rename session -->
        <test expect_num_outputs="1">
            <conditional name="operation">
                <param name="ops_list" value="rename" />
            </conditional>
            <output name="rename_log" ftype="xnt_rename.log">
                <assert_contents>
                    <has_text text="subject01_MR01"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help>
**What it does**
        Xnat-utils is a collection of scripts for conveniently up/downloading and listing data on/from XNAT server.

-----------
Usage
-----------
	Four commands are wrapped for Galaxy operation.

- ``xnat-ls``: list projects/subjects/sessions/scans
- ``xnat-get``: download scans and resources
- ``xnat-put``: upload scans and resources (requires write privileges to project)
- ``xnat-rename``: renames an XNAT session

-----------
Example
-----------

	- ``xnat-ls`` is the list operation from the Xnat operation drop-down menu
	    - select "List project id only" from the list ID dropdown menu for listing all project ids
	    - select "User defined" from the list ID dropdown menu to list the session/subject/scans for specified projct id

	- ``xnat-rename`` is the rename operation from the Xnat operation drop-down menu
	    - provide session to rename
	    - provide the new name of the session

	- ``xnat-put`` is the put operation from the Xnat operation drop-down menu; This is an operation to upload file to XNAT server
	    1. select files to upload (i.e file ends with nii.gz)
	    2. enter a session name; if create-session is enabled, ensure to enter the session name with this convention project_subject_visit (i.e 2 underscores)
	    3. enter a scan name; must select --overwrite below if the scan already exists on the server
	    4. resource name - the name of resource (data format) to upload tthe dataset to. If not provided the format will be determined from the file extension (i.e in most cases it won't be necessary to specify (--resource_name)
	    5. Enter project ID (optional) - Provide the project ID if session doesn't exist
	    6. Enter subject (optional) - Provide the subject ID if session doesn't exist
	    7. Enter scan ID (optional) - Provide the scan ID (defaults to the scan type
	    8. Select output file type - tgz file (default), per file, tar memory, tgz memroy, tar file
	    
	- ``xnat-get`` is the get operation from the Xnat operation drop-down menu; This is an operation to download files from XNAT server to Gaalxy history.
	    1. select "user define" from "Select an input type" from drop-down menu if xml file is not provided.
	    2. Name of session - enter a session to download data under specified session id or leave it blank if project id is provided in the optional options. All data will be downloaded under the project id.
	    3. Name of the scan - enter a scan id to download a specified scans under a session specify in step 2. Otherwise, all scans will be downlaoded under the session name in step 2.
	    4. Include scan identifier(s) (optional) - only download from sessions conatining the specified scans
	    5. Exclude scan identifier(s) (optional) - Only download from sessions that don't contain the specified scans
	    6. convert to file type - nifti, nifti.gz
	    7. File converter - dcm2niix (only this tool is availble; mrconvert - tba)
	    8. Only select sessions before this date (optional) - ISO8601 format date or date and time, like YYYY-MM-DD
	    9. Only select sessions after this date (optional) - ISO8601 format date or date and time, like YYYY-MM-DD
	    10. Enter project identier (optional) - use when step 2 is blank
	    11. Enter subject identifier (optional) - use with step 10 and step 2 is blank
	    12. The name of the resource to download (optional) - Not required if there is only one valid resource for each given dataset (e.g DICOM), which is typically the case
	    13. To disable matching on scan ID if the scan type is None - False (default); --dont_match_scan_id
	    14. Strip the default name - No (default); Whether to strip the default name of each dicom file to have just a number. Ex. 0001.dcm. It will work just on DICOM files, not NIFTI (--strip_name)


**How to interactive with XNAT server**

To interact with XNAT server from Galaxy you need to set up your XNAT login credential in Galaxy user preference.

1. Obtain your username and password from XNAT server (i.e Australian Imaging Service)

2. In Galaxy, add XNAT server url, username and password  to "XNAT Server and Account" field in User > Preferences > Manage Information. Your XNAT login credential can be different from your Galaxy login credential.



**Remarks**
        Xnatutils_ is used to query and retrieve files on Australia Image Service (AIS_) Server.

.. _AIS: https://ardc.edu.au/project/australian-imaging-service-ais/
.. _Xnatutils: https://github.com/Australian-Imaging-Service/xnatutils

    </help>
    <citations>
        <citation type="doi">10.47486/PL102</citation>
    </citations>
</tool>
